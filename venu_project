#Used the installed packages to below to run the program in myenv virtual environment
#The installed packages include Flask, SQLAlchemy, Flask-SQLAlchemy, Flask-Marshmallow
#and MYSQL connector.  
#This program creates and updates a e-commerce site built in Visual Studio Code.
#The virtual environment myenv is created in Visual Studio Code, and python is used
#to code it.  Postman application is used to display the results of the coding.  

#from wsgiref import validate
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from password import my_password
from marshmallow import fields
from marshmallow import ValidationError

#The Flask app is instantiated below, and the information for the database is placed afte app.config
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = f"mysql+mysqlconnector://root:{my_password}@localhost/e_commerce_db"
db = SQLAlchemy(app)
ma = Marshmallow(app)

#
class CustomerSchema(ma.Schema):
    name = fields.String(required=True)
    email = fields.String(required=True)
    phone = fields.String(required=True)

    class Meta:
        fields = ("name", "email", "phone", "id")

customer_schema = CustomerSchema()
customers_schema = CustomerSchema(many=True)

class ProductSchema(ma.Schema):
    name = fields.String(required=True, validate=validate.Length(min=1))
    price = fields.Float(required=True, validate=validate.Range(min=0))

class Meta:
        fields = ("name", "price", "id")

product_schema = ProductSchema()
products_schema = ProductSchema(many=True)

class OrderSchema(ma.Schema):
    date = fields.Date(required=True)
    customer_id = fields.Integer(required=True)

class Meta:
        fields = ("date", "customer_id", "id")

order_schema = OrderSchema()
orders_schema = OrderSchema(many=True)

class CustomerAccountSchema(ma.Schema):
    name = fields.String(required=True)
    password = fields.String(required=True)
    customer_id = fields.Integer(required=True)

class Meta:
        fields = ("name", "password", "customer_id", "id")

customeraccount_schema = CustomerAccountSchema()
customeraccounts_schema = CustomerAccountSchema(many=True)
   
#The Customer, Order, Product and Customer Account models are created below, similar to 
#MYSQL tables.  These tables show up in MYSQL under the database used (e-commerce). 
class Customer(db.Model):
    __tablename__ = "Customers"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    email = db.Column(db.String(320))
    phone = db.Column(db.String(15))
    orders = db.relationship("Order", backref="customer") #Allows multiple orders for each customer to be tracked.

class Order(db.Model):
    __tablename__ = "Orders"
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    customer_id = db.Column(db.Integer, db.ForeignKey("Customers.id"))
#One-to-One

class CustomerAccount(db.Model):
    __tablename__ = "Customer_Accounts"
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    customer_id = db.Column(db.Integer, db.ForeignKey("Customers.id"))
    #The line below solidifies a one to one relationship with the customer and customer account, using the uselist = false statement
    customer = db.relationship("Customer", backref="customer_account", uselist=False)

#Many-to-Many relationship, using an association table below.
#A customer can have multiple orders, with multiple products in each order 
order_product = db.Table("Order_Product",
        db.Column("order_id", db.Integer, db.ForeignKey("Orders.id"), primary_key=True),
        db.Column("product_id", db.Integer, db.ForeignKey("Products.id", primary_key=True))
        )

class Product(db.Model):
    __tablename__ = "Products"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    price = db.Column(db.Float, nullable=False)
    orders = db.relationship("Order", secondary=order_product, backref=db.backref("products"))

#The app.route sections below are CRUD operations, GET, POST, PUSH, and DELETE to add, update, and delete 
#data in MYSQL database, via Flask API

#The GET method pulls customers from the database
@app.route("/customers", methods=["GET"])
def get_customers():
    customers = Customer.query.all()
    return customers_schema.jsonify(customers)

#The POST adds customers to the database
@app.route("/customers", methods=["POST"])
def add_customer():
    try:
        #Validate input
        customer_data = customer_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_customer = Customer(name=customer_data["name"], email=customer_data["email"], phone=customer_data["phone"])
    db.session.add(new_customer)
    db.session.commit()
    return jsonify({"message": "New customer added successfully"}), 201

#The PUT method updates customer information already in the database
@app.route("/customers/<int:id>", methods=["PUT"])
def update_customer(id):
    customer = Customer.query.get_or_404(id)
    try:
        customer_data = customer_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400
    
    customer.name = customer_data["name"]
    customer.email = customer_data["email"]
    customer.phone = customer_data["phone"]
    db.session.commit()
    return jsonify({"message": "Customer details updated successfully"}), 200

#The DELETE method deletes customers from the database    
@app.route("/customers/<int:id>", methods=["DELETE"])
def delete_customer(id):
    customer = Customer.query.get_or_404(id)
    db.session.delete(customer)
    db.session.commit()
    return jsonify({"message": "Customer removed successfully"}), 200

########################## PRODUCTS ##################################
#The GET method pulls products from the database
@app.route("/products", methods=["GET"])
def get_product():
    products = Product.query.all()
    return products_schema.jsonify(products)

#The POST adds customers to the database
@app.route("/products", methods=["POST"])
def add_product():
    try:
        #Validate input
        product_data = product_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_product = Product(name=product_data["name"], price=product_data["price"])
    db.session.add(new_product)
    db.session.commit()
    return jsonify({"message": "New product added successfully"}), 201

#The PUT method updates product information already in the database
@app.route("/products/<int:id>", methods=["PUT"])
def update_product(id):
    product = Product.query.get_or_404(id)
    try:
        product_data = product_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400
    
    product.name = product_data["name"]
    product.price = product_data["price"]
    db.session.commit()
    return jsonify({"message": "Product updated successfully"}), 200

#The DELETE method deletes customers from the database    
@app.route("/products/<int:id>", methods=["DELETE"])
def delete_product(id):
    product = Product.query.get_or_404(id)
    db.session.delete(product)
    db.session.commit()
    return jsonify({"message": "Customer removed successfully"}), 200

########################## ORDERS ##################################
#The GET method pulls orders from the database
@app.route("/orders", methods=["GET"])
def get_orders():
    orders = Order.query.all()
    return orders_schema.jsonify(orders)

#The POST adds orders to the database
@app.route("/orders", methods=["POST"])
def add_order():
    try:
        #Validate input
        order_data = order_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_order = Order(date=order_data["date"], customer_id=order_data["customer id"])
    db.session.add(new_order)
    db.session.commit()
    return jsonify({"message": "New order added successfully"}), 201

#The PUT method updates order information already in the database
@app.route("/orders/<int:id>", methods=["PUT"])
def update_order(id):
    order = Order.query.get_or_404(id)
    try:
        order_data = order_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400
    
    order.date = order_data["date"]
    order.customer_id = customer_id_data["customer id"]
    db.session.commit()
    return jsonify({"message": "Order updated successfully"}), 200

#The DELETE method deletes orders from the database    
@app.route("/order/<int:id>", methods=["DELETE"])
def delete_order(id):
    order = Order.query.get_or_404(id)
    db.session.delete(order)
    db.session.commit()
    return jsonify({"message": "Order removed successfully"}), 200

########################## CUSTOMER ACCOUNTS ##################################
#The GET method pulls customer accounts from the database
@app.route("/customeraccounts", methods=["GET"])
def get_customeraccounts():
    customeraccounts = CustomerAccount.query.all()
    return customeraccounts_schema.jsonify(customeraccounts)

#The POST adds orders to the database
@app.route("/customeraccounts", methods=["POST"])
def add_customeraccount():
    try:
        #Validate input
        customeraccount_data = customeraccount_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400

    new_customeraccount = CustomerAccount(name=customeraccount_data["name"], password=customeraccount_data["password"], customer_id=customeraccount_data["customer id"])
    db.session.add(new_customeraccount)
    db.session.commit()
    return jsonify({"message": "New customer account added successfully"}), 201

#The PUT method updates customer accounts information already in the database
@app.route("/customeraccounts/<int:id>", methods=["PUT"])
def update_customeraccount(id):
    customeraccount = CustomerAccount.query.get_or_404(id)
    try:
        customeraccount_data = customeraccount_schema.load(request.json)
    except ValidationError as err:
        return jsonify(err.messages), 400
    
    customeraccount.name = customeraccount_data["name"]
    customeraccount.password = customeraccount_data["password"]
    customeraccount.customer_id = customeraccount_data["customer id"]
    db.session.commit()
    return jsonify({"message": "Order updated successfully"}), 200

#The DELETE method deletes customer account from the database    
@app.route("/customeraccounts/<int:id>", methods=["DELETE"])
def delete_order(id):
    customeraccount = CustomerAccount.query.get_or_404(id)
    db.session.delete(customeraccount)
    db.session.commit()
    return jsonify({"message": "Customer account removed successfully"}), 200

########################### QUERIES ################################

@app.route("/customers/by-email", methods=["GET"])
def query_customer_by_mail():
    email = request.args.get("email")
    customer = Customer.query.filter_by(email=email).first()

@app.route("/products/by-name", methods=["GET"])
def query_product_by_name():
    name = request.args.get("name")
    product = Product.query.filter(Product.name == name).first()
    if product:
        return product_schema.jsonify(product)
    else:
        return jsonify({"message": "Product not found"}), 404

#The following two lines of code creates tables for the models Customer, Product, Customer Account, and Order
#No table is duplicated in MYSQL if it is already created.
with app.app_context():
    db.create_all()

#The next two lines run the program, once you type in flask run into the virtual environment prompt using the
#command prompt.  The debug is on to watch in realtime actions done.
if __name__ == "__main__":
    app.run(debug=True)
